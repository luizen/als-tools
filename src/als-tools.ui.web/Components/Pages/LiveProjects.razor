@page "/live-projects"
@using AlsTools.Core.Entities
@using System.Linq
@inject ILiveProjectAsyncService liveProjectService

<PageTitle>Live Projects</PageTitle>

<h1>Live Projects</h1>

@if (totalProjects == 0)
{
    <p><button class="btn btn-primary" @onclick="InitDb">Init DB</button></p>
}

<p><button class="btn btn-secondary" @onclick="LoadAllProjects">Reload projects</button></p>

<p>Total Projects: @totalProjects</p>

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true"
    PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" Data="@projects" ColumnWidth="300px"
    LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedProjects>
    <Columns>
        <RadzenDataGridColumn Width="15px" Title="#" Frozen="true" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
            <Template Context="data">
                @(projects.IndexOf(data) + 1)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Name" Title="Project">
            <Template Context="project">
                <RadzenText TextStyle="TextStyle.Subtitle2" class="mb-0">@project.Name</RadzenText>
                <RadzenText TextStyle="TextStyle.Caption">@project.Path</RadzenText>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private IList<LiveProject> projects;
    IList<LiveProject> selectedProjects;
    private int? totalProjects;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadAllProjects();

        selectedProjects = new List<LiveProject>() { projects.FirstOrDefault() };
    }
    private async Task LoadAllProjects()
    {
        LogDebug("LoadAllProjects init");
        projects = (await liveProjectService.GetAllProjectsAsync()).ToList();
        totalProjects = projects.Count();
        LogDebug("LoadAllProjects end");
    }

    private async Task InitDb()
    {
        LogDebug("InitDb init");
        @* string[] folders = [ "~/Splice",
"~/Documents/Producao/Criacoes",
"/Volumes/SamsungT5Zen/Users/zenluiz/Documentos/Producao/Masterizacoes",
"/Volumes/SamsungT5Zen/Users/zenluiz/Documentos/Producao/Mixagens"
]; *@


        string[] folders = [ "~/Splice",
"~/Documents/Producao/Criacoes"
        ];

        await liveProjectService.InitializeDbFromFoldersAsync(folders, false);

        LogDebug("InitDb end");
    }

    private void LogDebug(string message)
    {
        Log.Information(message);
    }
}
