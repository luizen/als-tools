@page "/"
@using AlsTools.Core.Entities
@using System.Linq
@using System.Net
@inject ILiveProjectAsyncService liveProjectService
@inject NavigationManager navigationManager
@inject DialogService dialogService
@attribute [StreamRendering]

<PageTitle>Ableton Live Projects and Clips</PageTitle>
<h1>Ableton Live Projects and Clips (*.als, *.alc)</h1>

<RadzenCard class="my-2" style="display: flex; align-items: center; gap: 0.5rem">
    @if (totalProjects == 0)
    {
        <button class="btn btn-primary" @onclick="InitDb">Init DB</button>
        <textarea id="paths" class="form-control" rows="3" placeholder="Enter paths here, each on a new line"></textarea>
    }
    <button class="btn btn-secondary" @onclick="LoadAllProjects">Reload projects/clips</button>
    <button class="btn btn-secondary" @onclick="DeleteAllProjects">Delete all projects/clips</button>
    <p>Total Projects: @totalProjects</p>
</RadzenCard>

<RadzenProgressBar Value="@progressPercent" Visible="@progressBarVisible" />

<ErrorBoundary>
    <GridSettings @bind-Density="density" @bind-GridLines="gridLines" ShowUseTrackColors="false" />
</ErrorBoundary>

<RadzenStack Gap="2rem">
    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" Class="rz-p-4 rz-border-radius-1"
        Style="border: var(--rz-grid-cell-border);">
        <RadzenCheckBox @bind-Value="@autoFilter" Name="auto" />
        <RadzenLabel Text="Auto filter" Component="auto" Class="rz-me-6" />
        <RadzenButton Text="Apply Filter" Click="@ApplyFilter" Disabled="@autoFilter" Size="ButtonSize.Small" />
    </RadzenStack>

    <RadzenDataFilter @ref="dataFilter" Auto=autoFilter Data="@projects2" TItem="LiveProject" ViewChanged=@(view => filteredProjects = view)>
        <Properties>
            <RadzenDataFilterProperty Property="OrderID" Title="Order ID" FilterValue="@finalSelectedIds" Type="typeof(IEnumerable<int>)"
                FilterOperator="FilterOperator.Contains">
                <FilterTemplate>
                    <RadzenDropDown @bind-Value=@selectedIds Style="width:100%;" Change=@OnSelectedIdsChange Data="@(orderIds)" AllowClear="true"
                        Multiple="true" />
                </FilterTemplate>
            </RadzenDataFilterProperty>
            <RadzenDataFilterProperty Property="ProductIds" Title="ProductIds" FilterValue="@finalSelectedProductIds" Type="typeof(IEnumerable<int>)"
                FilterOperator="FilterOperator.In">
                <FilterTemplate>
                    <RadzenDropDown @bind-Value=@selectedProductIds Style="width:100%;" Change=@OnSelectedProductIdsChange Data="@(productIds)"
                        AllowClear="true" Multiple="true" />
                </FilterTemplate>
            </RadzenDataFilterProperty>
            <RadzenDataFilterProperty Property="Employee.LastName" Title="Employee Last Name" />
            <RadzenDataFilterProperty Property="Freight" Title="Freight" />
        </Properties>
    </RadzenDataFilter>

    <RadzenDataGrid Data="@projects" AllowColumnReorder="true" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
        FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
        ShowPagingSummary="true" AllowColumnPicking="true" LogicalFilterOperator="LogicalFilterOperator.Or" ColumnWidth="140px"
        PageSizeOptions="@pageSizeOptions" AllowGrouping="true" Density="@density" GridLines="@gridLines">
    <EmptyTemplate>
        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
    </EmptyTemplate>
    <GroupHeaderTemplate>
        @context.GroupDescriptor.GetTitle(): @(context.Data.Key ?? "") (Items: @context.Data.Count)
    </GroupHeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Width="60px" Title="#" Frozen="true" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Groupable="false">
            <Template Context="data">
                @(projects?.IndexOf(data) + 1)
            </Template>
        </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="Name" Title="Project/clip name" Frozen="true" Width="400px" Groupable="false" />
        <RadzenDataGridColumn Property="Path" Title="Path" Width="450px" />
        <RadzenDataGridColumn Property="Creator" Title="Live version" Width="180px" />
        <RadzenDataGridColumn Property="Tempo" Title="Tempo" Width="130px" />
        <RadzenDataGridColumn Title="Details" Width="140px" Groupable="false">
            <Template Context="data">
                <RadzenButton Icon="info" Size="ButtonSize.Small" Click="@(args => NavigateToDetails(data))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
</RadzenStack>



@code {
    private IList<LiveProject>? projects = new List<LiveProject>();
    private double? totalProjects;
    int[] pageSizeOptions = [5, 10, 20, 30, 50];
    Density density = Density.Default;
    Radzen.DataGridGridLines gridLines = Radzen.DataGridGridLines.Default;
    private double progressPercent;
    private bool progressBarVisible = false;
    bool autoFilter = true;
    RadzenDataFilter<LiveProject> dataFilter;

    IQueryable<LiveProject> filteredProjects;
    IQueryable<LiveProject> projects2;
    RadzenDataGrid<LiveProject> ordersGrid;

    IEnumerable<int> finalSelectedIds;
    IEnumerable<int> selectedIds;
    IEnumerable<int> orderIds;

    IEnumerable<int> finalSelectedProductIds;
    IEnumerable<int> selectedProductIds;
    IEnumerable<int> productIds;


    protected async Task NavigateToDetails(LiveProject data)
    {
        await dialogService.OpenAsync<ProjectDetails>("Project Details",
        new Dictionary<string, object>() { { "project", data } },
        new DialogOptions() { Width = "90%", Height = "90%", Resizable = true, Draggable = true });
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        @* await LoadAllProjects(); *@
        @* projects2 = dbContext.Orders.Include("OrderDetails.Product").Include("Customer").Include("Employee").ToList()
.Select(o =>
{
o.ProductIds = o.OrderDetails.Select(od => od.ProductID);
return o;
}).AsQueryable();

orderIds = projects2.Select(o => o.OrderID).Distinct();

productIds = projects2.SelectMany(o => o.OrderDetails).Select(od => od.ProductID).Distinct(); *@
    }

    private async Task LoadAllProjects()
    {
        Log.Debug("LoadAllProjects init");

        projects = (await liveProjectService.GetAllProjectsAsync()).ToList();
        totalProjects = projects.Count();
        await InvokeAsync(StateHasChanged);
        
        Log.Debug("LoadAllProjects end");
    }

    private async Task DeleteAllProjects()
    {
        Log.Debug("DeleteAllProjects init");

        await liveProjectService.DeleteAllProjectsAsync();

        totalProjects = 0;

        await InvokeAsync(StateHasChanged);
        @* StateHasChanged(); *@

        Log.Debug("DeleteAllProjects end");
    }

    private async Task InitDb()
    {
        Log.Debug("InitDb init");

        string[] folders = [@"~/Splice",
@"~/Documents/Producao/Criacoes",
@"/Volumes/SamsungT5Zen/Users/zenluiz/Documentos/Producao/Masterizacoes",
@"/Volumes/SamsungT5Zen/Users/zenluiz/Documentos/Producao/Mixagens",
@"~/Music/Ableton/User Library"];



        var progress = new Progress<double>(progressValue =>
        {
            progressPercent = progressValue;

            InvokeAsync(StateHasChanged); // Notify Blazor the state has changed
        });

        progressBarVisible = true;
        await Task.Run(() => liveProjectService.InitializeDbFromFoldersAsync(folders, false, progress));
        progressBarVisible = false;

        totalProjects = projects?.Count();
        @* StateHasChanged(); *@
        await InvokeAsync(StateHasChanged);

        Log.Debug("InitDb end");

        await LoadAllProjects();
    }


    void OnSelectedIdsChange(object value)
    {
        projects2 = projects2.ToList().AsQueryable();

        if (selectedIds != null && !selectedIds.Any())
        {
            selectedIds = null;
        }

        if (autoFilter)
        {
            finalSelectedIds = selectedIds;
        }
    }

    void OnSelectedProductIdsChange(object value)
    {
        projects2 = projects2.ToList().AsQueryable();

        if (selectedProductIds != null && !selectedProductIds.Any())
        {
            selectedProductIds = null;
        }

        if (autoFilter)
        {
            finalSelectedProductIds = selectedProductIds;
        }
    }

    async Task ApplyFilter()
    {
        finalSelectedIds = selectedIds;
        finalSelectedProductIds = selectedProductIds;
        await dataFilter.Filter();
    }

    async Task ApplyOrderDateFilter()
    {
        if (autoFilter)
        {
            await dataFilter.Filter();
        }
    }

    @* protected override async Task OnInitializedAsync()
{
await base.OnInitializedAsync();

projects2 = dbContext.Orders.Include("OrderDetails.Product").Include("Customer").Include("Employee").ToList()
.Select(o =>
{
o.ProductIds = o.OrderDetails.Select(od => od.ProductID);
return o;
}).AsQueryable();

orderIds = projects2.Select(o => o.OrderID).Distinct();

productIds = projects2.SelectMany(o => o.OrderDetails).Select(od => od.ProductID).Distinct();
} *@

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await dataFilter.AddFilter(new CompositeFilterDescriptor()
                {
                    Property = "Employee.LastName",
                    FilterValue = "Buchanan",
                    FilterOperator = FilterOperator.Contains
                });
        }
    }
}
