@page "/live-projects"
@using AlsTools.Core.Entities
@using System.Linq
@inject ILiveProjectAsyncService liveProjectService

<PageTitle>Live Projects</PageTitle>

<h1>Live Projects</h1>

@if (totalProjects == 0)
{
    <p><button class="btn btn-primary" @onclick="InitDb">Init DB</button></p>
}

<p><button class="btn btn-secondary" @onclick="LoadAllProjects">Reload projects</button></p>

<p>Total Projects: @totalProjects</p>

<div style="display: flex; align-items: center; margin-bottom: 16px">
    <RadzenButton Click="@ClearSelection" Text="Clear Selection" />
    @if (selectedProjects?.Any() == true)
    {
        <div style="margin-left: 16px">
            Selected project: @selectedProjects[0].Name
        </div>
    }

</div>

<RadzenCard class="my-4" style="display: flex; align-items: center; gap: 0.5rem">
    <div style="white-space:nowrap; margin-right: 5px">Density:</div>
    <RadzenSelectBar @bind-Value="@density" TextProperty="Text" ValueProperty="Value"
                        Data="@(Enum.GetValues(typeof(Density)).Cast<Density>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
    
    <div style="white-space:nowrap; margin-right: 5px; margin-left: 30px;">GridLines:</div>
    <RadzenSelectBar @bind-Value="@gridLines" TextProperty="Text" ValueProperty="Value"
                     Data="@(Enum.GetValues(typeof(Radzen.DataGridGridLines)).Cast<Radzen.DataGridGridLines>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
</RadzenCard>

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true"
    PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" Data="@projects" AllowColumnPicking="true"
    LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value="@selectedProjects" ColumnWidth="140px"
    PageSizeOptions="@pageSizeOptions" AllowGrouping="true" Density="@density" GridLines="@gridLines">
    <EmptyTemplate>
        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
    </EmptyTemplate>
    <GroupHeaderTemplate>
        @context.GroupDescriptor.GetTitle(): @(context.Data.Key ?? "") (Items: @context.Data.Count)
    </GroupHeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Width="60px" Title="#" Frozen="true" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Groupable="false">
            <Template Context="data">
                @(projects?.IndexOf(data) + 1)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Name" Title="Project name" Frozen="true" Width="400px" Groupable="false" />
        <RadzenDataGridColumn Property="Path" Title="Path" Width="450px" />
        <RadzenDataGridColumn Property="Creator" Title="Live version" Width="180px" />
        <RadzenDataGridColumn Property="Tempo" Title="Tempo" Width="130px" />
        <RadzenDataGridColumn Title="Details" Width="140px" Groupable="false" />
    </Columns>
</RadzenDataGrid>

@code {
    private IList<LiveProject>? projects = new List<LiveProject>();
    IList<LiveProject>? selectedProjects;
    private int? totalProjects;
    int[] pageSizeOptions = [5, 10, 20, 30, 50];
    Density density = Density.Default;
    Radzen.DataGridGridLines gridLines = Radzen.DataGridGridLines.Default;

    void ClearSelection()
    {
        selectedProjects?.Clear();
        selectedProjects = null;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadAllProjects();

        @* selectedProjects = new List<LiveProject>() { projects?.FirstOrDefault() }; *@
    }
    private async Task LoadAllProjects()
    {
        LogDebug("LoadAllProjects init");
        projects = (await liveProjectService.GetAllProjectsAsync()).ToList();
        totalProjects = projects.Count();
        selectedProjects = projects.Take(1).ToList();
        LogDebug("LoadAllProjects end");
    }

    private async Task InitDb()
    {
        LogDebug("InitDb init");
        @* string[] folders = [ "~/Splice",
"~/Documents/Producao/Criacoes",
"/Volumes/SamsungT5Zen/Users/zenluiz/Documentos/Producao/Masterizacoes",
"/Volumes/SamsungT5Zen/Users/zenluiz/Documentos/Producao/Mixagens"
]; *@


        string[] folders = [ "~/Splice",
"~/Documents/Producao/Criacoes"
        ];

        await liveProjectService.InitializeDbFromFoldersAsync(folders, false);

        LogDebug("InitDb end");
    }

    private void LogDebug(string message)
    {
        Log.Information(message);
    }
}
