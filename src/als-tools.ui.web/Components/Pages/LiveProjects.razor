@page "/"
@using AlsTools.Core.Entities
@using System.Linq
@using System.Net
@inject ILiveProjectAsyncService liveProjectService
@inject NavigationManager navigationManager
@inject DialogService dialogService

<PageTitle>Ableton Live Projects</PageTitle>
<h1>Ableton Live Projects</h1>

<RadzenCard class="my-4" style="display: flex; align-items: center; gap: 0.5rem">
    @if (totalProjects == 0)
    {
        <button class="btn btn-primary" @onclick="InitDb">Init DB</button>
    }
    <button class="btn btn-secondary" @onclick="LoadAllProjects">Reload projects</button>
    <button class="btn btn-secondary" @onclick="DeleteAllProjects">Delete all projects</button>
    <p>Total Projects: @totalProjects</p>
</RadzenCard>

<RadzenProgressBar Value="@progressPercent" Visible="@progressBarVisible" />

<RadzenCard class="my-4" style="display: flex; align-items: center; gap: 0.5rem">
    <div style="white-space:nowrap; margin-right: 5px">Density:</div>
    <RadzenSelectBar @bind-Value="@density" TextProperty="Text" ValueProperty="Value"
                        Data="@(Enum.GetValues(typeof(Density)).Cast<Density>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
    
    <div style="white-space:nowrap; margin-right: 5px; margin-left: 30px;">GridLines:</div>
    <RadzenSelectBar @bind-Value="@gridLines" TextProperty="Text" ValueProperty="Value"
                     Data="@(Enum.GetValues(typeof(Radzen.DataGridGridLines)).Cast<Radzen.DataGridGridLines>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
</RadzenCard>

<RadzenDataGrid Data="@projects" AllowColumnReorder="true" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
    FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
    ShowPagingSummary="true" AllowColumnPicking="true" LogicalFilterOperator="LogicalFilterOperator.Or" ColumnWidth="140px"
    PageSizeOptions="@pageSizeOptions" AllowGrouping="true" Density="@density" GridLines="@gridLines">
    <EmptyTemplate>
        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
    </EmptyTemplate>
    <GroupHeaderTemplate>
        @context.GroupDescriptor.GetTitle(): @(context.Data.Key ?? "") (Items: @context.Data.Count)
    </GroupHeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Width="60px" Title="#" Frozen="true" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Groupable="false">
            <Template Context="data">
                @(projects?.IndexOf(data) + 1)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Name" Title="Project name" Frozen="true" Width="400px" Groupable="false" />
        <RadzenDataGridColumn Property="Path" Title="Path" Width="450px" />
        <RadzenDataGridColumn Property="Creator" Title="Live version" Width="180px" />
        <RadzenDataGridColumn Property="Tempo" Title="Tempo" Width="130px" />
        <RadzenDataGridColumn Title="Details" Width="140px" Groupable="false">
            <Template Context="data">
                <RadzenButton Icon="info" Size="ButtonSize.Small" Click="@(args => NavigateToDetails(data))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private IList<LiveProject>? projects = new List<LiveProject>();
    private double? totalProjects;
    int[] pageSizeOptions = [5, 10, 20, 30, 50];
    Density density = Density.Default;
    Radzen.DataGridGridLines gridLines = Radzen.DataGridGridLines.Default;
    private double progressPercent;
    private bool progressBarVisible = false;

    protected async Task NavigateToDetails(LiveProject data)
    {
        await dialogService.OpenAsync<ProjectDetails>("Project Details",
        new Dictionary<string, object>() { { "project", data } },
        new DialogOptions() { Width = "90%", Height = "90%", Resizable = true, Draggable = true });
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadAllProjects();
    }

    private async Task LoadAllProjects()
    {
        LogDebug("LoadAllProjects init");
        projects = (await liveProjectService.GetAllProjectsAsync()).ToList();
        totalProjects = projects.Count();
        LogDebug("LoadAllProjects end");
    }

    private async Task DeleteAllProjects()
    {
        LogDebug("DeleteAllProjects init");

        await liveProjectService.DeleteAllProjectsAsync();

        totalProjects = 0;

        StateHasChanged();

        LogDebug("DeleteAllProjects end");
    }

    private async Task InitDb()
    {
        LogDebug("InitDb init");

        string[] folders = [ "~/Splice",
"~/Documents/Producao/Criacoes"
        ];

        var progress = new Progress<double>(progressValue =>
        {
            progressPercent = progressValue;

            InvokeAsync(StateHasChanged); // Notify Blazor the state has changed
        });

        progressBarVisible = true;
        await Task.Run(() => liveProjectService.InitializeDbFromFoldersAsync(folders, false, progress));
        progressBarVisible = false;

        totalProjects = projects?.Count();
        StateHasChanged();
        LogDebug("InitDb end");
    }

    private void LogDebug(string message)
    {
        Log.Information(message);
    }
}
