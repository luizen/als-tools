@page "/project-details/{project}"
@using AlsTools.Core.Entities
@using System.Linq
@using System.Net
@using AlsTools.Core.ValueObjects.Tracks
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager navigationManager
@inject ILiveProjectAsyncService liveProjectService

<PageTitle>Project details</PageTitle>
<h1>Project details</h1>

<RadzenCard class="my-4" style="display: flex; align-items: center; gap: 0.5rem">
    @if (project != null)
    {
        <div>
            <p><strong>Name:</strong> @project.Name</p>
            <p><strong>Path:</strong> @project.Path</p>
            <p><strong>Creator:</strong> @project.Creator</p>
            <p><strong>Tempo:</strong> @project.Tempo</p>
        </div>
    }
    </RadzenCard>

    <RadzenCard class="my-4" style="display: flex; align-items: center; gap: 0.5rem">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1.2rem">
            <RadzenLabel Text="Density" Component="True" />
            <RadzenSelectBar @bind-Value="@density" TextProperty="Text" ValueProperty="Value"
                Data="@(Enum.GetValues(typeof(Density)).Cast<Density>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />

            <RadzenLabel Text="Grid lines" Component="True" />
            <RadzenSelectBar @bind-Value="@gridLines" TextProperty="Text" ValueProperty="Value"
                Data="@(Enum.GetValues(typeof(Radzen.DataGridGridLines)).Cast<Radzen.DataGridGridLines>().Select(t => new { Text = $"{t}", Value = t }))"
                Size="ButtonSize.Small" />

            <RadzenLabel Text="Use track colors" Component="True" />
            <RadzenSwitch @bind-Value=@useTrackColors />
        </RadzenStack>
    </RadzenCard>

    <RadzenDataGrid Data="@tracks" AllowColumnReorder="true" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
        FilterMode="FilterMode.Advanced" AllowSorting="true" AllowPaging="false" AllowColumnPicking="true"
        LogicalFilterOperator="LogicalFilterOperator.Or" ColumnWidth="140px" AllowGrouping="true" Density="@density" GridLines="@gridLines"
        RowRender="@OnRowRender">
        <EmptyTemplate>
            <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
        </EmptyTemplate>
        <GroupHeaderTemplate>
            @context.GroupDescriptor.GetTitle(): @(context.Data.Key ?? "") (Items: @context.Data.Count)
        </GroupHeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Width="60px" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Groupable="false">
                <Template Context="data">
                    @(tracks?.IndexOf(data) + 1)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="EffectiveName" Title="Track name" Groupable="false" />
            <RadzenDataGridColumn Property="Type" Title="Type" />
            <RadzenDataGridColumn Property="TrackDelay.Description" Title="Track delay" />
            <RadzenDataGridColumn Property="IsMuted" Title="IsMuted" />
            <RadzenDataGridColumn Property="IsSoloed" Title="IsSoloed" />
            <RadzenDataGridColumn Property="IsGroupTrack" Title="IsGroupTrack" />
            <RadzenDataGridColumn Property="IsPartOfGroup" Title="IsPartOfGroup" />
            <RadzenDataGridColumn Property="Color" Title="Color" />
        </Columns>
    </RadzenDataGrid>

    @code {
    [Parameter]
    public required LiveProject project { get; set; }

    private IList<ITrack> tracks;
    Density density = Density.Default;
    bool useTrackColors = true;
    Radzen.DataGridGridLines gridLines = Radzen.DataGridGridLines.Default;

    protected override Task OnInitializedAsync()
    {
        tracks = project.Tracks.ToList();

        return base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        tracks = project.Tracks.ToList();

        await base.OnParametersSetAsync();
    }

    void OnRowRender(RowRenderEventArgs<ITrack> args)
    {
        if (useTrackColors)
            args.Attributes.Add("style", $"background-color: {args.Data.Color.HexColor};");
    }
}