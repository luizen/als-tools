@page "/stats"
@using AlsTools.Core.Entities
@using AlsTools.Core.ValueObjects.ResultSets
@* @using Microsoft.AspNetCore.Components.QuickGrid *@
@using als_tools.ui.web.Data
@using System.Linq
@inject ILiveProjectAsyncService liveProjectService

<PageTitle>Statistics</PageTitle>

<h1>Statistics</h1>



<div>
    <label for="ignoreDisabledDevices">Ignore disabled devices:</label>
    <input type="checkbox" id="ignoreDisabledDevices" @bind="ignoreDisabledDevices" />

    <label for="limit">Limit:</label>
    <input type="number" id="limit" @bind="limit" />

    <button class="btn btn-primary" @onclick="LoadStatistics">Load statistics</button>
</div>

@* <QuickGrid Items="@tracksCountPerProject">
<PropertyColumn Property="@(p => p.ProjectName)" Sortable="true" />
<PropertyColumn Property="@(p => p.ProjectPath)" Sortable="true" />
<PropertyColumn Property="@(p => p.ItemsCount)" Sortable="true" />
</QuickGrid> *@


@* @if (projects == null)
{
<p><em>Loading...</em></p>
}
else
{
<table class="table">
<thead>
<tr>
<th>Id</th>
<th>Name</th>
<th>Path</th>
</tr>
</thead>
<tbody>
@foreach (var project in projects)
{
<tr>
<td>@project.Id</td>
<td>@project.Name</td>
<td>@project.Path</td>
</tr>
}
</tbody>
</table>
} *@

@code
{
    private bool ignoreDisabledDevices = false;
    private int limit = 10;
    private int total;

    private IQueryable<ItemsCountPerProjectResult>? tracksCountPerProject;
    private IQueryable<ItemsCountPerProjectResult>? pluginsCountPerProject;
    private IQueryable<ItemsCountPerProjectResult>? stockDevicesCountPerProject;
    private IQueryable<ItemsCountPerProjectResult>? projectsWithHighestPluginsCount;
    private IQueryable<ItemsCountPerProjectResult>? projectsWithHighestTracksCount;
    private IQueryable<DevicesUsageCountResult>? mostUsedStockDevices;
    private IQueryable<DevicesUsageCountResult>? mostUsedPlugins;

    private async Task LoadStatistics()
    {
        total = await liveProjectService.GetProjectsCount();
        tracksCountPerProject = (await liveProjectService.GetTracksCountPerProject()).AsQueryable();
        pluginsCountPerProject = (await liveProjectService.GetPluginsCountPerProject(ignoreDisabledDevices)).AsQueryable();
        stockDevicesCountPerProject = (await
        liveProjectService.GetStockDevicesCountPerProject(ignoreDisabledDevices)).AsQueryable();
        projectsWithHighestPluginsCount = (await liveProjectService.GetProjectsWithHighestPluginsCount(limit,
        ignoreDisabledDevices)).AsQueryable();
        projectsWithHighestTracksCount = (await liveProjectService.GetProjectsWithHighestTracksCount(limit)).AsQueryable();
        mostUsedStockDevices = (await liveProjectService.GetMostUsedStockDevices(limit, ignoreDisabledDevices)).AsQueryable();
        mostUsedPlugins = (await liveProjectService.GetMostUsedPlugins(limit, ignoreDisabledDevices)).AsQueryable();
    }
}
