// <auto-generated />
using System;
using AlsTools.Infrastructure.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AlsTools.Infrastructure.Migrations
{
    [DbContext(typeof(AlsToolsDbContext))]
    partial class MyNewDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("AlsTools.Core.Models.MyBaseDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FkTrackId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fk_TrackId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Sort")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Devices", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AlsTools.Core.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Tempo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("AlsTools.Core.Models.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FkProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fk_ProjectId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FkProjectId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("AlsTools.Core.Models.MyMaxForLiveDevice", b =>
                {
                    b.HasBaseType("AlsTools.Core.Models.MyBaseDevice");

                    b.HasIndex("FkTrackId");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("AlsTools.Core.Models.MyPluginDevice", b =>
                {
                    b.HasBaseType("AlsTools.Core.Models.MyBaseDevice");

                    b.Property<int>("Format")
                        .HasColumnType("INTEGER");

                    b.HasIndex("FkTrackId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("AlsTools.Core.Models.MyStockDevice", b =>
                {
                    b.HasBaseType("AlsTools.Core.Models.MyBaseDevice");

                    b.HasIndex("FkTrackId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("AlsTools.Core.Models.Track", b =>
                {
                    b.HasOne("AlsTools.Core.Models.Project", "FkProject")
                        .WithMany("Tracks")
                        .HasForeignKey("FkProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FkProject");
                });

            modelBuilder.Entity("AlsTools.Core.Models.MyMaxForLiveDevice", b =>
                {
                    b.HasOne("AlsTools.Core.Models.Track", "FkTrack")
                        .WithMany("MaxForLiveDevices")
                        .HasForeignKey("FkTrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FkTrack");
                });

            modelBuilder.Entity("AlsTools.Core.Models.MyPluginDevice", b =>
                {
                    b.HasOne("AlsTools.Core.Models.Track", "FkTrack")
                        .WithMany("PluginDevices")
                        .HasForeignKey("FkTrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FkTrack");
                });

            modelBuilder.Entity("AlsTools.Core.Models.MyStockDevice", b =>
                {
                    b.HasOne("AlsTools.Core.Models.Track", "FkTrack")
                        .WithMany("StockDevices")
                        .HasForeignKey("FkTrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FkTrack");
                });

            modelBuilder.Entity("AlsTools.Core.Models.Project", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("AlsTools.Core.Models.Track", b =>
                {
                    b.Navigation("MaxForLiveDevices");

                    b.Navigation("PluginDevices");

                    b.Navigation("StockDevices");
                });
#pragma warning restore 612, 618
        }
    }
}
